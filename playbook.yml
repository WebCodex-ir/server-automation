---
- hosts: webserver
  become: yes
  vars_files:
    - vars/main.yml
  tasks:
    - name: ">> 1. Basic Server Setup"
      block:
        - name: "Install prerequisites"
          apt: { name: ['ufw','curl','git','composer'], state: present, update_cache: yes }
        - name: "Configure UFW"
          ufw: { rule: allow, port: "{{ item }}", proto: tcp }
          loop: ['22','80','443']

    - name: ">> 2. Install Docker"
      block:
        - name: "Create directory for apt keyrings"
          file: { path: /etc/apt/keyrings, state: directory, mode: '0755' }
        - name: "Download and de-armor Docker's GPG key"
          shell: "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg"
          args: { creates: /etc/apt/keyrings/docker.gpg }
        - name: "Add Docker repository"
          apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
            state: present
        - name: "Install Docker packages"
          apt:
            name: ['docker-ce','docker-ce-cli','containerd.io','docker-compose-plugin']
            state: present
            update_cache: yes
        - name: "Add '{{ server_user }}' to docker group"
          user: { name: "{{ server_user }}", groups: docker, append: yes }

    - name: ">> 3. Setup Project Structure & Laravel"
      block:
        - name: "Create project root directory"
          file: { path: "{{ project_path }}", state: directory, owner: "{{ server_user }}", group: "{{ server_user }}" }
        - name: "Install Laravel Application"
          become_user: "{{ server_user }}"
          command: "composer create-project --prefer-dist laravel/laravel {{ project_path }}/src"
          args:
            creates: "{{ project_path }}/src/artisan"

    - name: ">> 4. Configure Project"
      block:
        - name: "Create nginx directory"
          file: { path: "{{ project_path }}/nginx", state: directory }
        - name: "Template out Docker and Nginx files"
          template: { src: "templates/{{ item.src }}", dest: "{{ project_path }}/{{ item.dest }}" }
          loop:
            - { src: 'docker-compose.yml.j2', dest: 'docker-compose.yml' }
            - { src: 'Dockerfile.j2', dest: 'Dockerfile' }
            - { src: 'nginx.conf.j2', dest: 'nginx/default.conf' }
        - name: "Create Laravel .env file from example"
          command: "cp {{ project_path }}/src/.env.example {{ project_path }}/src/.env"
          args: { creates: "{{ project_path }}/src/.env" }
        - name: "Set correct ownership for the entire project"
          file: { path: "{{ project_path }}", owner: "{{ server_user }}", group: "www-data", recurse: yes }
        - name: "Set correct permissions for storage and cache"
          file: { path: "{{ project_path }}/src/{{ item }}", state: directory, mode: 'g+w', recurse: yes }
          loop: ['storage', 'bootstrap/cache']
        - name: "Make .env file group-writable"
          file: { path: "{{ project_path }}/src/.env", mode: '0664' }
        - name: "Set database credentials in Laravel .env"
          lineinfile:
            dest: "{{ project_path }}/src/.env"
            regexp: "^{{ item.key }}="
            line: "{{ item.key }}={{ item.value }}"
          loop:
            - { key: 'DB_HOST', value: 'db' }
            - { key: 'DB_DATABASE', value: '{{ db_name }}' }
            - { key: 'DB_USERNAME', value: '{{ db_user }}' }
            - { key: 'DB_PASSWORD', value: '{{ db_password }}' }
            - { key: 'APP_URL', value: 'https://{{ domain_name }}' }

    - name: ">> 5. Obtain SSL Certificate"
      block:
        - name: "Run Certbot to get certificate"
          command: >
            docker run --rm -p 80:80
            -v "/etc/letsencrypt:/etc/letsencrypt" -v "/var/lib/letsencrypt:/var/lib/letsencrypt"
            certbot/certbot certonly --standalone --agree-tos
            --email {{ letsencrypt_email }} --no-eff-email -n
            -d {{ domain_name }} -d www.{{ domain_name }}
          args:
            creates: "/etc/letsencrypt/live/{{ domain_name }}"
    
    - name: ">> 6. Launch Final Application"
      block:
        - name: "Run docker compose up"
          command: "docker compose up -d"
          args: { chdir: "{{ project_path }}" }
        - name: "Wait for services to be ready"
          pause:
            seconds: 15
        - name: "Generate Laravel App Key"
          command: "docker compose exec app php artisan key:generate --force"
          args: { chdir: "{{ project_path }}" }
        - name: "Run Laravel migrations"
          command: "docker compose exec app php artisan migrate --force"
          args: { chdir: "{{ project_path }}" }

    - name: ">> 7. Setup Auto-Renewal for SSL"
      template: { src: templates/certbot-renew.sh.j2, dest: /etc/cron.daily/certbot-renew, mode: '0755' }
